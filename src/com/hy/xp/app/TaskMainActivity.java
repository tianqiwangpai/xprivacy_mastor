/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.hy.xp.app;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.Process;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ListView;
import android.widget.TabHost;
import android.widget.TextView;

import com.hy.xp.app.task.DBMgr;
import com.hy.xp.app.task.InitData;
import com.hy.xp.app.task.NActivityTaskManager;
import com.hy.xp.app.task.TaskAttribute;

public class TaskMainActivity extends Activity {
    private TextView datalowest;
    private TextView datalowlv;
    private TextView datalv;
    private TextView datanew;
    private CheckBox dataonlystay;
    private TextView datastay;
    private TextView datastayway;
    private CheckBox datatlow;
    private ListView listview;
    private AppAdapte mAppAdapter;
    private Context mcontext;
    private TextView nextdaycount;
    private TextView nextdaylowest;
    private TextView nextdaylowlv;
    private TextView nextdaylv;
    private CheckBox nextdaystay;
    private TextView nextdaystayway;
    private TextView nextdaytimes;
    private CheckBox nextdaytlow;
    private TextView nextmonthlowest;
    private TextView nextmonthlowlv;
    private TextView nextmonthlv;
    private CheckBox nextmonthstay;
    private TextView nextmonthstayway;
    private CheckBox nextmonthtlow;
    private TextView nextweeklowest;
    private TextView nextweeklowlv;
    private TextView nextweeklv;
    private CheckBox nextweekstay;
    private TextView nextweekstayway;
    private CheckBox nextweektlow;
    private Button starttask;
    private TextView stime1;
    private TextView stime2;
    private TextView taskdate;
    private Button taskmanager;
    private TextView taskname;
    private static ExecutorService mExecutor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors(), new PriorityThreadFactory());

	private static class PriorityThreadFactory implements ThreadFactory
	{
		@Override
		public Thread newThread(Runnable r)
		{
			Thread t = new Thread(r);
			t.setPriority(Thread.NORM_PRIORITY);
			return t;
		}
	}
    
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.taskmainview);
        mcontext = this;
        Meta.annotate(getResources());
        
        
        String[] applist = getListapp();
        if((applist != null) && (AppAdapte.dataselected.size() == 0)) {
            for(int i = 0; i < applist.length; i++) {
            	AppAdapte.dataselected.add(applist[i]);
            }
        }
        
		// Start task to get app list
		AppListTask appListTask = new AppListTask();
		appListTask.executeOnExecutor(mExecutor, (Object) null);
		
        
        TabHost th = (TabHost)findViewById(R.id.tabhost);
        th.setup();
        th.addTab(th.newTabSpec("tab1").setIndicator("通用").setContent(R.id.tab1));
        th.addTab(th.newTabSpec("tab2").setIndicator("单日").setContent(R.id.tab2));
        th.addTab(th.newTabSpec("tab3").setIndicator("隔日").setContent(R.id.tab3));
        th.addTab(th.newTabSpec("tab4").setIndicator("隔周").setContent(R.id.tab4));
        th.addTab(th.newTabSpec("tab5").setIndicator("隔月").setContent(R.id.tab5));
        
        taskmanager = (Button)findViewById(R.id.manage);
        taskmanager.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                Intent it = new Intent(mcontext, NActivityTaskManager.class);
                startActivity(it);
            }
        });
        initUI();
        initPrivacyManager();
    }
    
    private void initPrivacyManager() {
        int userId = Util.getUserId(Process.myUid());
        if(!PrivacyService.checkClient()) {
            return;
        }
        PrivacyManager.setSetting(0x0, "OnDemand", Boolean.toString(false));
        try {
            String s = Environment.getExternalStorageState();
            if("mounted".equals(s)) {
                File sdcardDir = Environment.getExternalStorageDirectory();
                String path = "/xp_log/";
                File logDir = new File(path);
                if(!logDir.exists()) {
                    logDir.mkdirs();
                }
                Runtime.getRuntime().exec(path);
                return;
            }
        } catch(IOException e1) {
            e1.printStackTrace();
        }
    }
    
    private void initUI() {
        taskname = (TextView)findViewById(R.id.taskname);
        taskdate = (TextView)findViewById(R.id.date);
        datanew = (TextView)findViewById(R.id.dupnum);
        datastay = (TextView)findViewById(R.id.stays);
        dataonlystay = (CheckBox)findViewById(R.id.onlystay);
        datalv = (TextView)findViewById(R.id.stayl);
        datastayway = (TextView)findViewById(R.id.staysway);
        datatlow = (CheckBox)findViewById(R.id.toblow);
        datalowlv = (TextView)findViewById(R.id.lowlv);
        datalowest = (TextView)findViewById(R.id.lowest);
        stime1 = (TextView)findViewById(R.id.ttime1);
        stime2 = (TextView)findViewById(R.id.ttime2);
        nextdaystay = (CheckBox)findViewById(R.id.nextdaymode);
        nextdaycount = (TextView)findViewById(R.id.nextdaycounts);
        nextdaytimes = (TextView)findViewById(R.id.nextdaytimes);
        nextdaylv = (TextView)findViewById(R.id.nextdaystayl);
        nextdaystayway = (TextView)findViewById(R.id.nextdaystaysway);
        nextdaytlow = (CheckBox)findViewById(R.id.nextdaytoblow);
        nextdaylowlv = (TextView)findViewById(R.id.nextdaytoblowlv);
        nextdaylowest = (TextView)findViewById(R.id.nextdaylowmin);
        nextweekstay = (CheckBox)findViewById(R.id.wstaymode);
        nextweeklv = (TextView)findViewById(R.id.wstayl);
        nextweekstayway = (TextView)findViewById(R.id.wstaysway);
        nextweektlow = (CheckBox)findViewById(R.id.wtoblow);
        nextweeklowlv = (TextView)findViewById(R.id.wlowestlv);
        nextweeklowest = (TextView)findViewById(R.id.wlowest);
        nextmonthstay = (CheckBox)findViewById(R.id.mstaymode);
        nextmonthlv = (TextView)findViewById(R.id.mstayl);
        nextmonthstayway = (TextView)findViewById(R.id.mstaysway);
        nextmonthtlow = (CheckBox)findViewById(R.id.mtoblow);
        nextmonthlowlv = (TextView)findViewById(R.id.nextmonthlowlv);
        nextmonthlowest = (TextView)findViewById(R.id.mlowest);
        starttask = (Button)findViewById(R.id.start);
        
        starttask.setOnClickListener(new OnClickListener() {			
			@Override
			public void onClick(View v) {
				inittask();
			}
		});
        initData();
    }
    
    protected void onPause() {
        super.onPause();
        Saveapplist(AppAdapte.dataselected);
    }
    
    private boolean ischanged(List<String> applist) {
        String[] listapp = getListapp();
        if(applist.size() > 0) {
            if(listapp == null) {
                return true;
            }
            if(applist.size() == listapp.length) {
            	boolean isexists = false;
                for(Object temp :applist.toArray()){
                	if(!Util.itemexists(listapp, temp.toString())){
                		isexists = true;
                		break;
                	}
                }
                return isexists;
            }
        }
        return true;
    }
    
    private void Saveapplist(List<String> applist) {
    	if (ischanged(applist))
    	      DBMgr.getInstance(ApplicationEx.getContextObject()).clean_task_cache(DBMgr.getCurrentTaskname());
    	    try
    	    {
    	      BufferedWriter localBufferedWriter = new BufferedWriter(new OutputStreamWriter(openFileOutput("applistselect", Context.MODE_PRIVATE)));
    	      StringBuffer localStringBuffer = new StringBuffer();
    	     
    	      for(int i=0; i<applist.size()-1; i++){    	    	  
    	    	  localStringBuffer.append(applist.get(i)).append("|");
    	      }
    	      if(applist.size() != 0){
    	    	  localStringBuffer.append(applist.get(applist.size() - 1));
    	      }    	      
    	      localBufferedWriter.write(localStringBuffer.toString());
    	      localBufferedWriter.flush();
    	      localBufferedWriter.close();
    	    }
    	    catch (FileNotFoundException localFileNotFoundException)
    	    {
    	      localFileNotFoundException.printStackTrace();
    	      return;
    	    }
    	    catch (IOException localIOException)
    	    {
    	      localIOException.printStackTrace();
    	    }
    	return;
    }
    
    private String[] getListapp() {
		try {
			String[] arrayOfString = new BufferedReader(new InputStreamReader(
					openFileInput("applistselect"))).readLine().split("[|]");
			return arrayOfString;
		} catch (Exception localException) {
		}
		return null;
    }
    
    private void initData() {
    	SharedPreferences sharedPreferences = getSharedPreferences("task", Context.MODE_PRIVATE);
        String Taskcurrent = sharedPreferences.getString("currenttask", null);
        if(Taskcurrent == null) {
            return;
        }
        List<TaskAttribute> listtask = DBMgr.getInstance(this).getTaskAttributeByTaskName(Taskcurrent);
        TaskAttribute taskattribute = null;
        if(listtask != null) {
            if(listtask.size() != 0) {
                taskattribute = listtask.get(0x0);
            }
        }
        if(taskattribute != null) {
            taskname.setText(taskattribute.getTaskName());
            taskdate.setText("3天");
            datanew.setText("");
            datastay.setText("");
            dataonlystay.setChecked(false);
            datalv.setText("");
            datatlow.setChecked(taskattribute.isTaskDeclineFlag());
            datalowest.setText("");
            datalowlv.setText("");
            datastayway.setText("\u56fa\u5b9a\u62bd\u53d6");
            nextdaystay.setChecked(taskattribute.isTaskNextDayFlag());
            nextdaycount.setText("");
            nextdaycount.setText("");
            nextdaylv.setText("");
            nextdaystayway.setText("\u56fa\u5b9a\u62bd\u53d6");
            nextdaytlow.setChecked(taskattribute.isTaskNextDayVisitDeclineFlag());
            nextdaylowlv.setText("");
            nextdaylowest.setText("");
            nextweekstay.setChecked(true);
            nextweeklv.setText("");
            nextweekstayway.setText("\u56fa\u5b9a\u62bd\u53d6");
            nextweektlow.setChecked(taskattribute.isTaskNextWeekVisitDeclineFlag());
            nextweeklowlv.setText("");
            nextweeklowest.setText("");
            nextmonthstay.setChecked(true);
            nextmonthlv.setText("");
            nextmonthstayway.setText("\u56fa\u5b9a\u62bd\u53d6");
            nextmonthtlow.setChecked(taskattribute.isTaskNextMonthVisitDeclineFlag());
            nextmonthlowlv.setText("");
            nextmonthlowest.setText("");
            stime1.setText("");
            stime2.setText("");
        }
    }
    
    class AppListTask extends AsyncTask <Object, Integer, List<ApplicationInfoEx>>{
        private ProgressDialog mProgressDialog;
        
        protected List<ApplicationInfoEx> doInBackground(Object params) {
            return ApplicationInfoEx.getXApplicationList(TaskMainActivity.this, mProgressDialog);
        }
        
        protected void onPreExecute() {
			// Show progress dialog
			mProgressDialog = new ProgressDialog(TaskMainActivity.this);
			mProgressDialog.setMessage(getString(R.string.msg_loading));
			mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
			mProgressDialog.setProgressNumberFormat(null);
			mProgressDialog.setCancelable(false);
			mProgressDialog.setCanceledOnTouchOutside(false);
			mProgressDialog.show();
        }
        
        @SuppressWarnings({ "unchecked", "unchecked", "unchecked" })
		protected void onPostExecute(List<ApplicationInfoEx> listApp) {
        	
        	if (!TaskMainActivity.this.isFinishing()) {
				// Display app list
        		 List<Map<String, ?>> list = new ArrayList<Map<String,?>>();
        		for(ApplicationInfoEx appinfo : listApp){
        			HashMap<String, Object> localHashMap = new HashMap<String, Object>();
                    localHashMap.put("name", appinfo.getApplicationName().get(0));
                    localHashMap.put("icon", appinfo.getIcon(TaskMainActivity.this));
                    localHashMap.put("uuid", Integer.valueOf(((ApplicationInfoEx)appinfo).getUid()));
                    localHashMap.put("packagename", ((ApplicationInfoEx)appinfo).getPackageName().get(0));
                    if ((localHashMap.get("name") != null) && (!"".equals(localHashMap.get("name"))))
                        list.add(localHashMap);
        		}
				
                mAppAdapter = new AppAdapte(mcontext, 
                		list, 
                		R.layout.listviewcontent, 
                		new String[] { "name", "icon" }, 
                		new int[] {R.id.appname, R.id.appicon});
				ListView lvApp = (ListView) findViewById(R.id.appset);
				lvApp.setAdapter(mAppAdapter);
                
				// Dismiss progress dialog
				if (mProgressDialog.isShowing())
					try {
						mProgressDialog.dismiss();
					} catch (IllegalArgumentException ignored) {
					}
			}

			super.onPostExecute(listApp);      	
        }

		@Override
		protected List<ApplicationInfoEx> doInBackground(Object... params) {
			return ApplicationInfoEx.getXApplicationList(TaskMainActivity.this, mProgressDialog);
		}
    }
    
    private void inittask() {
        Saveapplist(AppAdapte.dataselected);
        InitData initdata = new InitData();
        SharedPreferences preferences = ApplicationEx.getContextObject().getSharedPreferences("task", Context.MODE_PRIVATE);
        String currenttaskname = preferences.getString("currenttask", null);
        if(currenttaskname != null) {
            try {
                initdata.execute((TaskAttribute)DBMgr.getInstance(this).getTaskAttributeByTaskName(currenttaskname).get(0));
            } catch(Exception localException1) {
            }
        }
        ApplicationInfoEx.resetseconde();
        initData();
    }
}
